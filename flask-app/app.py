from flask import Flask, request, jsonify
from flask_cors import CORS
import tensorflow as tf
import numpy as np
from PIL import Image
import io
import base64

app = Flask(__name__)
CORS(app)  # ‡πÄ‡∏õ‡∏¥‡∏î CORS ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
interpreter = tf.lite.Interpreter(model_path="model_unquant.tflite")
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# ‡πÇ‡∏´‡∏•‡∏î Labels
with open("labels.txt", "r") as f:
    labels = [line.strip() for line in f.readlines()]

@app.route('/scan', methods=['POST'])
def scan():
    try:
        print("üì• ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡πÅ‡∏Å‡∏ô‡∏†‡∏≤‡∏û")

        if not request.is_json:
            return jsonify({'error': '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON'}), 400

        data = request.get_json()
        image_data = data.get('image')

        if not image_data or ',' not in image_data:
            return jsonify({'error': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö'}), 400

        print("‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û base64 ‡∏¢‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:", len(image_data))

        # ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ base64
        image_data = base64.b64decode(image_data.split(',')[1])
        image = Image.open(io.BytesIO(image_data)).convert("RGB")  # üëà ‡πÅ‡∏õ‡∏•‡∏á RGBA ‡πÄ‡∏õ‡πá‡∏ô RGB

        # Resize ‡πÅ‡∏•‡∏∞ Normalize
        img = np.array(image.resize((224, 224)), dtype=np.float32) / 255.0
        input_data = np.expand_dims(img, axis=0)

        # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
        interpreter.set_tensor(input_details[0]['index'], input_data)
        interpreter.invoke()
        output = interpreter.get_tensor(output_details[0]['index'])[0]

        predicted_index = int(np.argmax(output))
        predicted_label = labels[predicted_index]
        confidence = float(np.max(output)) * 100

        print(f"‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {predicted_label} ({confidence:.2f}%)")

        return jsonify({
            'label': predicted_label,
            'confidence': confidence
        })

    except Exception as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", e)
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(port=5001, debug=True)
