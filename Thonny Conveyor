import time
import json
import firebase_admin
from firebase_admin import credentials, db
import RPi.GPIO as GPIO
# üîß Firebase Setup
cred = credentials.Certificate("/home/admin/Desktop/this-pro-done-firebase-adminsdk-fbsvc-72157f3dbb.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://this-pro-done-default-rtdb.asia-southeast1.firebasedatabase.app'
})
orders_ref = db.reference('orders')
# ‚öôÔ∏è Relay Pin Mapping (‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‚Üí (PIN, Runtime))
PRODUCT_MAPPING = {
    "‡∏ñ‡∏∏‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏£‡∏≠‡∏á‡∏ä‡πâ‡∏≥": (25, 5),
    "‡πÅ‡∏ú‡πà‡∏ô‡∏ã‡∏≠‡∏ü‡πÄ‡∏à‡∏•‡∏£‡∏≠‡∏á‡∏à‡∏°‡∏π‡∏Å‡πÄ‡∏ó‡πâ‡∏≤": (16, 4.6),
    "‡πÅ‡∏ú‡πà‡∏ô‡∏ã‡∏¥‡∏•‡∏¥‡πÇ‡∏Ñ‡∏ô‡πÄ‡∏à‡∏•‡∏£‡∏≠‡∏á‡∏™‡πâ‡∏ô‡πÄ‡∏ó‡πâ‡∏≤ ‡πÅ‡∏Å‡πâ‡∏£‡∏≠‡∏á‡∏ä‡πâ‡∏≥": (5, 4.5),    
    "‡∏õ‡∏•‡∏≠‡∏Å‡πÄ‡∏à‡∏•‡∏ã‡∏¥‡∏•‡∏¥‡πÇ‡∏Ñ‡∏ô‡∏£‡∏≠‡∏á‡∏™‡πâ‡∏ô‡πÄ‡∏ó‡πâ‡∏≤": (6, 4.5),
    "‡∏ú‡πâ‡∏≤‡∏£‡∏≠‡∏á‡∏ù‡πà‡∏≤‡πÄ‡∏ó‡πâ‡∏≤‡∏•‡∏î‡∏õ‡∏ß‡∏î": (17, 5),
    "‡∏ú‡πâ‡∏≤‡∏£‡∏≠‡∏á‡∏™‡πâ‡∏ô ‡∏•‡∏î‡∏õ‡∏ß‡∏î‡∏™‡πâ‡∏ô‡πÄ‡∏ó‡πâ‡∏≤ ‡πÅ‡∏Å‡πâ‡∏£‡∏≠‡∏á‡∏ä‡πâ‡∏≥": (27,4.8),
    "‡∏ã‡∏¥‡∏•‡∏¥‡πÇ‡∏Ñ‡∏ô‡∏ñ‡∏ô‡∏≠‡∏°‡∏™‡πâ‡∏ô‡πÄ‡∏ó‡πâ‡∏≤ ‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏≤‡∏¢‡∏´‡∏ç‡∏¥‡∏á": (22, 5),
    "‡πÄ‡∏ó‡∏õ‡∏ú‡πâ‡∏≤ ‡∏•‡πä‡∏≠‡∏Ñ‡∏ô‡∏¥‡πâ‡∏ß": (26, 4.55),
    "‡∏™‡∏≤‡∏¢‡∏£‡∏±‡∏î‡πÉ‡∏ï‡πâ‡∏ù‡πà‡∏≤‡πÄ‡∏ó‡πâ‡∏≤ ‡∏•‡∏î‡∏õ‡∏ß‡∏î‡∏ù‡πà‡∏≤‡πÄ‡∏ó‡πâ‡∏≤": (21, 4.55),
    "‡∏ñ‡∏∏‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏≠‡∏∏‡πâ‡∏á‡πÄ‡∏ó‡πâ‡∏≤": (23, 4.6),
    "‡∏ã‡∏¥‡∏•‡∏¥‡πÇ‡∏Ñ‡∏ô‡∏Ñ‡∏•‡∏∏‡∏°‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á": (24, 4.55),
    #"‡∏ñ‡∏∏‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ã‡∏¥‡∏•‡∏¥‡πÇ‡∏Ñ‡∏ô‡∏ñ‡∏ô‡∏≠‡∏°‡πÄ‡∏ó‡πâ‡∏≤ ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ó‡πâ‡∏≤": (,),
}
# üîå GPIO Setup
GPIO.setmode(GPIO.BCM)
for pin, _ in PRODUCT_MAPPING.values():
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, GPIO.HIGH)  # ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ß‡πÄ‡∏¢‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
# üì¶ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
def update_order_status(order_id, status):
    try:
        order_ref = db.reference(f'orders/{order_id}')
        order_ref.update({"status": status})
        print(f"üì¶ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {order_id} ‚Üí '{status}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        print(f"[ERROR] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
# üîÑ ‡πÅ‡∏õ‡∏•‡∏á products ‡πÄ‡∏õ‡πá‡∏ô list ‡πÄ‡∏™‡∏°‡∏≠
def parse_products(raw):
    if isinstance(raw, str):
        try:
            return json.loads(raw)
        except:
            return []
    elif isinstance(raw, dict):
        return [{"name": k, "quantity": v} for k, v in raw.items()]
    elif isinstance(raw, list):
        return raw
    return []
# üöö ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
def process_order(order_id, products):
    for item in products:
        name_raw = item.get("name", "")
        name = name_raw.strip().replace("  ", " ")
        qty = item.get("quantity", 1)
        if name in PRODUCT_MAPPING:
            pin, runtime = PRODUCT_MAPPING[name]
            print(f"\nüöö ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á: {name} (PIN {pin}) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {qty} ‡∏ä‡∏¥‡πâ‡∏ô")
            for i in range(qty):
                print(f"  üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà {i+1}")
                GPIO.output(pin, GPIO.LOW)
                time.sleep(runtime)
                GPIO.output(pin, GPIO.HIGH)
                print(f"  ‚úÖ ‡∏™‡πà‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà {i+1} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        else:
            print(f"[WARN] ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ß‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {name}")
    update_order_status(order_id, "ready")
    print(f"‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {order_id} ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô\n")
# üõ∞ ‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
def listen_for_orders():
    print("üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß...")
    total_processed_items = 0
    first_check = True
    try:
        while True:
            orders = orders_ref.get() or {}
            if first_check:
                print(f"üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö: {len(orders)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                first_check = False
            for order_id, data in orders.items():
                status = (data.get("status") or "").lower()
                if status != "paid":
                    continue
                raw_products = data.get("products", [])
                products = parse_products(raw_products)
                if not products:
                    print(f"[WARN] ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {order_id} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
                    continue
                print(f"\nüîî ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà: {order_id}")
                process_order(order_id, products)
                # ‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                items_in_this_order = sum(item.get("quantity", 1) for item in products)
                total_processed_items += items_in_this_order
                print(f"üìà ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß: {total_processed_items} ‡∏ä‡∏¥‡πâ‡∏ô")
            time.sleep(2)
    except KeyboardInterrupt:
        print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    finally:
        GPIO.cleanup()
# ‚ñ∂Ô∏è Main
if __name__ == '__main__':
    listen_for_orders()
